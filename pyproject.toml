[build-system]
requires = ['setuptools', 'poetry_core>=1.0']
build-backend = 'poetry.core.masonry.api'

[tool.poetry]
name = 'tjax'
version = "0.30.1"
description = "Tools for JAX."
license = 'MIT'
authors = ['Neil Girdhar <mistersheik@gmail.com>']
readme = 'README.rst'
repository = 'https://github.com/NeilGirdhar/tjax'
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Science/Research',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Utilities',
    'Typing :: Typed',
    'License :: OSI Approved :: MIT License']

[tool.poetry.dependencies]
python = '>=3.10,<3.13'
rich = '>=12.6'
jax = '>=0.4.18'
numpy = '>=1.22'
optax = '>=0.1'
typing_extensions = '>=4.2'

[tool.poetry.group.dev.dependencies]
chex = '>=0.1.3'
hypothesis = '^6'
isort = '>=5.8'
jupyter = '>=1'
mypy = '>=1.0'
pylint = '>=2.12.2'
pyright = '>=0.0.13'
pytest = '>=7'
ruff = '>=0'

[tool.poetry.group.extra.dependencies]
flax = '>= 0.6.3'
networkx = '>= 2.8.8'

[tool.isort]
line_length = 100
multi_line_output = 0
skip_glob = ['.pytype/*.py']

[tool.pytest]

[tool.pytype]
disable = 'ignored-abstractmethod'

[tool.pylint.master]
jobs = 0

[tool.pylint.messages_control]
disable = [
    'abstract-method',
    'arguments-differ',
    'duplicate-code',
    'invalid-name',
    'invalid-unary-operand-type',
    'line-too-long',
    'missing-docstring',
    'no-member',
    'too-few-public-methods',
    'too-many-ancestors',
    'too-many-arguments',
    'too-many-branches',
    'too-many-instance-attributes',
    'too-many-locals',
    'too-many-return-statements',
    'too-many-statements',
    'unused-argument',
    'unused-import']
enable= [
    'useless-suppression',
    'use-symbolic-message-instead']

[tool.pylint.reports]
output-format = 'colorized'

[tool.pylint.similarities]
min-similarity-lines = 10
ignore-imports = 'yes'

[tool.pyright]
include = ["tjax", "tests"]
stubPath = ""
enableTypeIgnoreComments = false
reportImportCycles = true
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingSuperCall = true
reportMissingTypeArgument = true
reportOverlappingOverload = true
reportPrivateImportUsage = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnnecessaryTypeIgnoreComment = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true

[tool.mypy]
files = ["tjax", "tests"]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
strict_equality = true
warn_redundant_casts = true
# warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ['networkx', 'optax']
ignore_missing_imports = true

[tool.ruff]
preview = true
select = ["ALL"]
ignore = ["B011", "D100", "D101", "D102", "D107", "D103", "D105", "S101", "ANN101",
       "ANN102", "ANN401", "TID252", "FBT003", "I001", "G004", "PT015", "PGH003", "COM812",
       "Q000", "TCH001", "TCH002", "TCH003", "ERA001", "ARG001", "ARG002", "ARG003", "ARG004",
       "FIX002", "TD", "PD008", "PT013", "CPY001", "PLR6301"]
line-length = 100
target-version = "py310"
extend-exclude = ["__init__.py"]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.flake8-errmsg]
max-string-length = 40

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.pylint]
max-args = 8
